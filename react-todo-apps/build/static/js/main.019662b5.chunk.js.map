{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","map","item","className","key","type","id","value","text","onChange","event","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","AddItem","this","setState","Date","now","preventDefault","newItems","newItem","console","log","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2UAgCeA,MA3Bf,SAAmBC,GACf,IACMD,EADQC,EAAMC,MACGC,KAAI,SAAAC,GACvB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC3B,2BACA,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAC5BG,MAAOL,EAAKM,KACZC,SAAU,SAAAC,GACNX,EAAMY,UAAUD,EAAME,OAAOL,MAAOL,EAAKE,QAG7C,8BAAM,kBAAC,IAAD,CAAiBD,UAAU,UACjCU,KAAK,QACLC,QAAS,kBAAKf,EAAMgB,WAAWb,EAAKE,cAKpD,OACI,6BACA,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BnB,K,eCpBToB,IAAQC,IAAIC,K,IA+FGC,E,kDA5Fb,WAAYtB,GAAO,IAAD,8BAChB,cAAMA,IACDuB,MAAM,CACTtB,MAAO,GACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,KAGT,EAAKoB,YAAa,EAAKA,YAAYC,KAAjB,gBAClB,EAAKC,QAAS,EAAKA,QAAQD,KAAb,gBACd,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZD,E,wDAcNf,GACViB,KAAKC,SAAS,CACZL,YAAY,CACVf,KAAME,EAAME,OAAOL,MACnBH,IAAKyB,KAAKC,W,8BAKRpB,GACNA,EAAMqB,iBACN,IAEIC,EAFEC,EAAQN,KAAKL,MAAMC,YACzBW,QAAQC,IAAIF,GAEO,KAAhBA,EAAQzB,OACTwB,EAAS,GAAD,mBAAML,KAAKL,MAAMtB,OAAjB,CAAwBiC,KAMlCN,KAAKC,SAAS,CACZ5B,MAAOgC,EACPT,YAAa,CACXf,KAAM,GACNJ,IAAK,Q,iCAIAA,GACT,IAAMgC,EAAeT,KAAKL,MAAMtB,MAAMqC,QAAO,SAAAnC,GAAI,OAC/CA,EAAKE,MAAMA,KACbuB,KAAKC,SAAS,CACZ5B,MAAOoC,M,gCAID5B,EAAMJ,GACd8B,QAAQC,IAAI,UAAYR,KAAKL,MAAMtB,OACnC,IAAMA,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZ8B,QAAQC,IAAIjC,EAAKE,IAAK,OAAOA,GAC7BF,EAAKM,KAAMA,MAGfmB,KAAKC,SAAS,CACZ5B,MAAOA,M,+BAIT,OACE,yBAAKG,UAAU,OACb,gCACA,0BAAMA,UAAU,YAAYmC,SAAUX,KAAKD,SAC3C,2BAAOrB,KAAK,OACZkC,YAAY,kBACZhC,MAAOoB,KAAKL,MAAMC,YAAYf,KAC9BC,SAAUkB,KAAKH,cAGf,4BAAQnB,KAAK,UAAb,QAIA,2BAAIsB,KAAKL,MAAMtB,MAAMQ,OAEvB,kBAAC,EAAD,CAAWR,MAAO2B,KAAKL,MAAMtB,MAAOe,WAAYY,KAAKZ,WACjDJ,UAAWgB,KAAKhB,iB,GAnFR6B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.019662b5.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./ListItems.css\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport FlipMove from \"react-flip-move\"\r\n\r\nfunction ListItems(props){\r\n    const items = props.items\r\n    const ListItems =items.map(item =>{\r\n        return <div className=\"list\" key={item.key}>\r\n                    <p>\r\n                    <input type=\"text\" id={item.key} \r\n                    value={item.text} \r\n                    onChange={event =>{\r\n                        props.setUpdate(event.target.value, item.key)\r\n                        }}\r\n                    />\r\n                    <span><FontAwesomeIcon className=\"faIcons\" \r\n                    icon=\"trash\" \r\n                    onClick={() =>props.deleteItem(item.key)}\r\n                    /></span></p>\r\n                    \r\n                </div>\r\n    })\r\n    return (\r\n        <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {ListItems}\r\n        </FlipMove>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default ListItems\r\n","import React from 'react';\nimport './App.css';\nimport ListItems from \"./ListItems.js\"\nimport {library} from \"@fortawesome/fontawesome-svg-core\"\nimport {faTrash} from \"@fortawesome/free-solid-svg-icons\"\n\nlibrary.add(faTrash)\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      items: [],\n      currentItem: {\n        text: '',\n        key: ''\n      }\n    }\n    this.handleInput= this.handleInput.bind(this);\n    this.AddItem= this.AddItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  handleInput(event){\n    this.setState({\n      currentItem:{\n        text: event.target.value,\n        key: Date.now()\n      }\n    })\n\n  }\n  AddItem(event){\n    event.preventDefault();\n    const newItem=this.state.currentItem;\n    console.log(newItem)\n    let newItems\n    if(newItem.text !==\"\"){\n      newItems= [...this.state.items, newItem];\n    }\n    //const newItems=[]\n    //if(newItem.text !==\"\"){\n    //  newItems.push(newItem) ;\n    //}\n    this.setState({\n      items: newItems,\n      currentItem: {\n        text: \"\",\n        key: \"\"\n      }\n    })\n  }\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n\n  }\n  setUpdate(text, key){\n    console.log(\"items: \" + this.state.items);\n    const items = this.state.items;\n    items.map(item=>{      \n      if(item.key===key){\n        console.log(item.key +\"    \"+key)\n        item.text= text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n        <form className=\"todo-form\" onSubmit={this.AddItem}>\n        <input type=\"text\" \n        placeholder=\"Enter your task\"\n        value={this.state.currentItem.text}\n        onChange={this.handleInput}>\n\n        </input>\n        <button type=\"submit\">Add</button>\n\n        </form>\n        \n        <p>{this.state.items.text}</p>\n      </header>\n      <ListItems items={this.state.items} deleteItem={this.deleteItem} \n          setUpdate={this.setUpdate}>\n\n      </ListItems>\n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}